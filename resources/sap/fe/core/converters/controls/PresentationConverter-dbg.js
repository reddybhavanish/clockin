sap.ui.define(["././TableConverter", "././ChartConverter", "./CommonConverter"], function (TableConverter, ChartConverter, CommonConverter) {
  "use strict";

  var _exports = {};
  var getTemplateAnnotationPath = CommonConverter.getTemplateAnnotationPath;
  var getOnlyAnnotation = CommonConverter.getOnlyAnnotation;
  var getNavigationProperties = CommonConverter.getNavigationProperties;
  var getTargetEntityType = CommonConverter.getTargetEntityType;
  var getChartProperties = ChartConverter.getChartProperties;
  var getTableManifestConfiguration = TableConverter.getTableManifestConfiguration;
  var getTableAnnotationConfiguration = TableConverter.getTableAnnotationConfiguration;
  var getTableActionsConfiguration = TableConverter.getTableActionsConfiguration;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var _getSelectionFields = function (context, selectionVariants) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;

    var entityType = context.entityType;
    var selectionFields = [];
    var oSelectionVariantFields = {};
    selectionVariants === null || selectionVariants === void 0 ? void 0 : selectionVariants.forEach(function (selectionVariant) {
      selectionVariant.propertyNames.forEach(function (propertyName) {
        if (!oSelectionVariantFields[propertyName]) {
          oSelectionVariantFields[propertyName] = true;
        }
      });
    });
    (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.SelectionFields) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.forEach(function (selection, selectionIndex) {
      var selectionFieldValue = selection.value;

      if (!oSelectionVariantFields[selectionFieldValue]) {
        selectionFields.push({
          readablePath: selectionFieldValue,
          templatingPath: "/" + entityType.name + "/@com.sap.vocabularies.UI.v1.SelectionFields/" + selectionIndex + "/$PropertyPath"
        });
      }
    });
    return selectionFields;
  };
  /**
   * Get Page presentation properties (LineItem, SelectionFields, Chart configuration and Table configuration).
   * @param {PageConverterContext} [context] Page Context
   * @param {string} [presentationPath] relative annotation Path used for presentation (PResentation Variant or Line Item)
   * @returns {PresentationConfiguration} object containing LineItem, SelectionFields, Chart configuration and Table configuration
   */


  function getPresentation(context, presentationPath) {
    var _oEntityType$annotati;

    var entityType = context.entityType,
        manifestSettings = context.manifestSettings;
    var annotationPath = presentationPath;
    var result = {};
    var navigationInfo = getNavigationProperties(presentationPath, entityType);
    var defaultAnnotationPath = navigationInfo.prefix + "@com.sap.vocabularies.UI.v1.LineItem";
    var visualizationLineItemPath = "",
        visualizationChartPath = "";
    var oEntityType = navigationInfo.property ? getTargetEntityType(navigationInfo.property, entityType) : entityType;
    var visualizationPaths = [],
        selectionVariants = [],
        isCompliantPresentationVariant = false;
    var presentationVariant = (_oEntityType$annotati = oEntityType.annotations) === null || _oEntityType$annotati === void 0 ? void 0 : _oEntityType$annotati.getAnnotation("UI")[getOnlyAnnotation(annotationPath)];

    if (presentationVariant && presentationVariant.$Type === "com.sap.vocabularies.UI.v1.PresentationVariantType") {
      // Presentation Variant
      var visualizations = presentationVariant.Visualizations;

      if (visualizations) {
        for (var i = 0; i < visualizations.length; i++) {
          var targetAnnotationPath = visualizations[i].value;
          var itemPath = navigationInfo.prefix + targetAnnotationPath;

          if (targetAnnotationPath && targetAnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.LineItem") > -1 && !visualizationLineItemPath) {
            visualizationPaths.push(itemPath);
            isCompliantPresentationVariant = true;
            result.annotationPath = getTemplateAnnotationPath(presentationVariant.fullyQualifiedName, entityType);
            visualizationLineItemPath = itemPath;
          } else if (targetAnnotationPath && targetAnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.Chart") > -1 && sap.ui.Device && sap.ui.Device.system.desktop && !navigationInfo.property && // Currently chart is not managed with navigation Property
          !visualizationChartPath) {
            visualizationPaths.push(itemPath);
            visualizationChartPath = itemPath;
          }

          if (visualizationLineItemPath && visualizationChartPath) {
            i = visualizations.length;
          }
        }
      }

      if (!isCompliantPresentationVariant) {
        visualizationLineItemPath = defaultAnnotationPath;
        visualizationPaths = [defaultAnnotationPath];
        annotationPath = defaultAnnotationPath;
      }
    } else {
      visualizationLineItemPath = annotationPath.indexOf("@com.sap.vocabularies.UI.v1.LineItem") > -1 ? annotationPath : defaultAnnotationPath;
      visualizationPaths = [visualizationLineItemPath];
    } //Calculate Threshold for Table


    if (isCompliantPresentationVariant && presentationVariant.MaxItems) {
      result.threshold = presentationVariant.MaxItems;
    } else {
      result.threshold = navigationInfo.property ? 10 : 30;
    }

    result.visualizationPaths = [];
    visualizationPaths.forEach(function (itemPath) {
      var _oEntityType$annotati2;

      var visualization = (_oEntityType$annotati2 = oEntityType.annotations) === null || _oEntityType$annotati2 === void 0 ? void 0 : _oEntityType$annotati2.getAnnotation("UI")[getOnlyAnnotation(itemPath)];

      if (visualization) {
        var targetPath = "/" + entityType.name + "/" + itemPath;
        result.visualizationPaths.push(targetPath);
      }
    });

    if (!result.annotationPath) {
      result.annotationPath = result.visualizationPaths[0];
    }

    if (manifestSettings.controlConfiguration) {
      var _manifestSettings$con, _manifestSettings$con2, _manifestSettings$con3, _manifestSettings$con4;

      (_manifestSettings$con = manifestSettings.controlConfiguration[visualizationLineItemPath]) === null || _manifestSettings$con === void 0 ? void 0 : (_manifestSettings$con2 = _manifestSettings$con.tableSettings) === null || _manifestSettings$con2 === void 0 ? void 0 : (_manifestSettings$con3 = _manifestSettings$con2.quickVariantSelection) === null || _manifestSettings$con3 === void 0 ? void 0 : (_manifestSettings$con4 = _manifestSettings$con3.paths) === null || _manifestSettings$con4 === void 0 ? void 0 : _manifestSettings$con4.forEach(function (path) {
        var _oEntityType$annotati3;

        var selection = (_oEntityType$annotati3 = oEntityType.annotations) === null || _oEntityType$annotati3 === void 0 ? void 0 : _oEntityType$annotati3.getAnnotation("UI")[getOnlyAnnotation(path.annotationPath)];

        if (selection) {
          var _selection$SelectOpti;

          var propertyNames = [];
          (_selection$SelectOpti = selection.SelectOptions) === null || _selection$SelectOpti === void 0 ? void 0 : _selection$SelectOpti.forEach(function (selectOption) {
            var propertyName = selectOption.PropertyName;
            var PropertyPath = propertyName.value;

            if (propertyNames.indexOf(PropertyPath) === -1) {
              propertyNames.push(PropertyPath);
            }
          });
          selectionVariants.push({
            text: selection.Text,
            key: path.annotationPath,
            propertyNames: propertyNames
          });
        }
      });
    }

    var presentationConfiguration = _objectSpread({}, result, {}, {
      selectionFields: navigationInfo.property ? undefined : _getSelectionFields(context, selectionVariants),
      lineItemPath: visualizationLineItemPath,
      entityName: entityType.name,
      targetEntityName: oEntityType.name,
      quickVariantSelection: selectionVariants
    });

    var visualizationContext = _objectSpread({}, {
      visualizationPath: visualizationLineItemPath
    }, {}, context);

    var tableConfiguration = {
      annotation: getTableAnnotationConfiguration(visualizationContext),
      control: getTableManifestConfiguration(visualizationContext),
      actions: getTableActionsConfiguration(visualizationLineItemPath, entityType, manifestSettings)
    };
    presentationConfiguration = _objectSpread({}, presentationConfiguration, {}, {
      tableConfiguration: tableConfiguration
    }); //Get Chart properties

    if (visualizationChartPath && isCompliantPresentationVariant) {
      visualizationContext.visualizationPath = visualizationChartPath;
      presentationConfiguration.chartConfiguration = getChartProperties(visualizationContext);
    }

    return presentationConfiguration;
  }

  _exports.getPresentation = getPresentation;
  return _exports;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,