sap.ui.define(["sap/fe/core/helpers/StableIdHelper", "../ManifestSettings", "./CommonConverter"], function (StableIdHelper, ManifestSettings, CommonConverter) {
  "use strict";

  var _exports = {};
  var getPVisualizationP13nMode = CommonConverter.getPVisualizationP13nMode;
  var getOnlyAnnotation = CommonConverter.getOnlyAnnotation;
  var getTargetEntityType = CommonConverter.getTargetEntityType;
  var getNavigationProperties = CommonConverter.getNavigationProperties;
  var ActionType = ManifestSettings.ActionType;

  var _getDeleteStatus = function (tableContext) {
    var _entitySet$annotation, _entitySet$annotation2, _entitySet$annotation3, _targetProperties$ent, _targetProperties$ent2, _targetProperties$ent3;

    var entityType = tableContext.entityType,
        entitySet = tableContext.entitySet;

    var targetProperties = _getTargetProperties(tableContext),
        navigationOrCollectionName = targetProperties.name ? targetProperties.name : entityType.name,
        restrictedProperties = (_entitySet$annotation = entitySet.annotations) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.Capabilities) === null || _entitySet$annotation2 === void 0 ? void 0 : (_entitySet$annotation3 = _entitySet$annotation2.NavigationRestrictions) === null || _entitySet$annotation3 === void 0 ? void 0 : _entitySet$annotation3.RestrictedProperties,
        isDeletable = ((_targetProperties$ent = targetProperties.entitySet.annotations) === null || _targetProperties$ent === void 0 ? void 0 : (_targetProperties$ent2 = _targetProperties$ent.Capabilities) === null || _targetProperties$ent2 === void 0 ? void 0 : (_targetProperties$ent3 = _targetProperties$ent2.DeleteRestrictions) === null || _targetProperties$ent3 === void 0 ? void 0 : _targetProperties$ent3.Deletable) !== false;

    if (restrictedProperties) {
      var match = restrictedProperties.find(function (property) {
        return property.NavigationProperty.value === navigationOrCollectionName && property.DeleteRestrictions;
      });

      if (match && match.DeleteRestrictions) {
        return match.DeleteRestrictions.Deletable;
      }
    }

    return "{= " + (isDeletable !== false) + " && ${ui>/editMode} === 'Editable'}";
  };

  var _getRowConfigurationProperty = function (tableContext) {
    var entityType = tableContext.entityType,
        manifestSettings = tableContext.manifestSettings;

    var targetProperties = _getTargetProperties(tableContext);

    var navProperty = targetProperties.name;
    var navigationOrCollectionName = navProperty ? navProperty : entityType.name;
    var pressProperty = undefined,
        navigationTarget;

    if (manifestSettings.navigation) {
      var navigationProperty = manifestSettings.navigation[navigationOrCollectionName];

      if (navigationProperty) {
        var _navigationProperty$d, _navigationProperty$d2, _navigationProperty$d3;

        navigationTarget = (_navigationProperty$d = navigationProperty.display) === null || _navigationProperty$d === void 0 ? void 0 : _navigationProperty$d.target;

        if (navigationTarget) {
          pressProperty = ".handlers.onChevronPressNavigateOutBound( $controller ,'" + navigationTarget + "', ${$parameters>bindingContext})";
        } else if (navigationTarget = (_navigationProperty$d2 = navigationProperty.detail) === null || _navigationProperty$d2 === void 0 ? void 0 : _navigationProperty$d2.outbound) {
          pressProperty = ".handlers.onChevronPressNavigateOutBound( $controller ,'" + navigationTarget + "', ${$parameters>bindingContext})";
        } else if (navigationTarget = (_navigationProperty$d3 = navigationProperty.detail) === null || _navigationProperty$d3 === void 0 ? void 0 : _navigationProperty$d3.route) {
          var targetEntity = entityType.name === navigationOrCollectionName ? entityType : getTargetEntityType(navigationOrCollectionName, entityType);

          if (targetEntity) {
            var _targetAnnotations$Co, _targetAnnotations$Co2;

            var targetAnnotations = targetProperties.entitySet.annotations;
            pressProperty = ".routing.navigateForwardToContext(${$parameters>bindingContext}, { targetPath: '" + navigationOrCollectionName + "', editable : " + ((targetAnnotations === null || targetAnnotations === void 0 ? void 0 : (_targetAnnotations$Co = targetAnnotations.Common) === null || _targetAnnotations$Co === void 0 ? void 0 : _targetAnnotations$Co.DraftRoot) || (targetAnnotations === null || targetAnnotations === void 0 ? void 0 : (_targetAnnotations$Co2 = targetAnnotations.Common) === null || _targetAnnotations$Co2 === void 0 ? void 0 : _targetAnnotations$Co2.DraftNode) ? "!${$parameters>bindingContext}.getProperty('IsActiveEntity')" : "undefined") + "})"; //Need to access to DraftRoot and DraftNode !!!!!!!
          }
        }
      }
    }

    return {
      press: pressProperty,
      action: pressProperty ? "Navigation" : undefined
    };
  };

  var _getSelectionMode = function (tableContext) {
    var _manifestSettings$con, _manifestSettings$con2, _manifestSettings$con3, _targetEntityType$ann, _targetProperties$ent4, _targetProperties$ent5, _targetProperties$ent6;

    var entityType = tableContext.entityType,
        manifestSettings = tableContext.manifestSettings,
        visualizationPath = tableContext.visualizationPath,
        selectionMode = ((_manifestSettings$con = manifestSettings.controlConfiguration) === null || _manifestSettings$con === void 0 ? void 0 : (_manifestSettings$con2 = _manifestSettings$con[visualizationPath]) === null || _manifestSettings$con2 === void 0 ? void 0 : (_manifestSettings$con3 = _manifestSettings$con2.tableSettings) === null || _manifestSettings$con3 === void 0 ? void 0 : _manifestSettings$con3.selectionMode) || "Multi",
        targetProperties = _getTargetProperties(tableContext),
        targetEntityType = targetProperties.name ? getTargetEntityType(targetProperties.name, entityType) : entityType,
        lineItemAnnotation = (_targetEntityType$ann = targetEntityType.annotations) === null || _targetEntityType$ann === void 0 ? void 0 : _targetEntityType$ann.getAnnotation("UI")[getOnlyAnnotation(visualizationPath)],
        isDeletable = !(((_targetProperties$ent4 = targetProperties.entitySet.annotations) === null || _targetProperties$ent4 === void 0 ? void 0 : (_targetProperties$ent5 = _targetProperties$ent4.Capabilities) === null || _targetProperties$ent5 === void 0 ? void 0 : (_targetProperties$ent6 = _targetProperties$ent5.DeleteRestrictions) === null || _targetProperties$ent6 === void 0 ? void 0 : _targetProperties$ent6.Deletable) === false);

    if (lineItemAnnotation) {
      var match = lineItemAnnotation.find(function (lineItem) {
        var _lineItem$Inline;

        return (lineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || lineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && lineItem.RequiresContext && (lineItem.RequiresContext === true || lineItem.RequiresContext.Bool === "true")) && !(lineItem.Inline && ((_lineItem$Inline = lineItem.Inline) === null || _lineItem$Inline === void 0 ? void 0 : _lineItem$Inline.Bool) !== "true");
      });

      if (match) {
        return selectionMode;
      } else if (isDeletable) {
        if (targetProperties.name) {
          return "{= ${ui>/editMode} === 'Editable' ? '" + selectionMode + "' : 'None'}";
        } else {
          return selectionMode;
        }
      }
    }

    return "None";
  };

  var _getTableManifestSettings = function (tableContext) {
    var _manifestSettings$con4;

    var manifestSettings = tableContext.manifestSettings,
        visualizationPath = tableContext.visualizationPath;
    return manifestSettings.controlConfiguration ? (_manifestSettings$con4 = manifestSettings.controlConfiguration[visualizationPath]) === null || _manifestSettings$con4 === void 0 ? void 0 : _manifestSettings$con4.tableSettings : undefined;
  };

  var _getTargetProperties = function (tableContext) {
    var entityType = tableContext.entityType,
        entitySet = tableContext.entitySet,
        visualizationPath = tableContext.visualizationPath;
    var navigationProperty = getNavigationProperties(visualizationPath, entityType);
    var name = navigationProperty.property;
    var targetEntitySet;

    if (!name) {
      targetEntitySet = entitySet;
    } else {
      targetEntitySet = name.split("/").reduce(function (currentEntitySet, namePart) {
        return currentEntitySet.navigationPropertyBinding[namePart];
      }, entitySet);
    }

    return {
      entitySet: targetEntitySet,
      name: name
    };
  };

  var _getTableActionsFromManifest = function (manifestActions) {
    var tableActions = {};

    for (var key in manifestActions) {
      var manifestAction = manifestActions[key];
      var lastDotIndex = manifestAction.press.lastIndexOf(".");
      var tableAction = {
        controlId: !manifestAction.id ? key : manifestAction.id,
        visible: manifestAction.visible === undefined ? "true" : manifestAction.visible,
        enabled: manifestAction.enabled === undefined ? "true" : manifestAction.enabled,
        handlerModule: manifestAction.press.substring(0, lastDotIndex).replace(/\./gi, "/"),
        handlerMethod: manifestAction.press.substring(lastDotIndex + 1),
        press: manifestAction.press,
        type: ActionType.Default,
        text: manifestAction.text
      };
      tableActions[key] = tableAction;
    }

    return tableActions;
  };
  /**
   * Get Table properties coming from annotations
   * @param {VisualizationConverterContext} [tableContext] Visualization Context
   * @returns {TableAnnotationConfiguration} table properties coming from Annotation calculation
   */


  function getTableAnnotationConfiguration(tableContext) {
    var entityType = tableContext.entityType,
        manifestSettings = tableContext.manifestSettings,
        visualizationPath = tableContext.visualizationPath,
        navigationInfo = getNavigationProperties(visualizationPath, entityType),
        entityName = entityType.name,
        isEntitySet = !navigationInfo.property,
        navProperty = navigationInfo.property,
        navigationOrCollectionName = navProperty ? navProperty : entityType.name,
        p13nMode = getPVisualizationP13nMode(tableContext),
        id = StableIdHelper.generate(["fe", "table", navigationOrCollectionName, visualizationPath.replace(navigationOrCollectionName + "/", "")]);
    return {
      id: id,
      collection: "/" + entityName + (!isEntitySet ? "/" + navProperty : ""),
      navigationPath: navProperty,
      navigationOrCollectionName: navigationOrCollectionName,
      row: _getRowConfigurationProperty(tableContext),
      isEntitySet: isEntitySet,
      editMode: isEntitySet ? "Display" : "{ui>/editMode}",
      createMode: isEntitySet ? "false" : "{localUI>/createMode}",
      busy: isEntitySet ? "{ui>/busy}" : "{ui>/busyLocal/" + id + "}",
      p13nMode: p13nMode,
      show: {
        delete: isEntitySet ? undefined : _getDeleteStatus(tableContext),
        create: isEntitySet ? undefined : "{= ${ui>/editMode} === 'Editable'}"
      },
      selectionMode: _getSelectionMode(tableContext),
      autoBindOnInit: !!!isEntitySet,
      enableControlVM: manifestSettings.variantManagement === "Control" ? p13nMode : undefined,
      filterId: isEntitySet ? StableIdHelper.generate(["fe", "FilterBar", entityName]) : undefined
    };
  }
  /**
   * Get Table properties coming from manifest
   * @param {VisualizationConverterContext} [tableContext] Visualization Context
   * @returns {TableAnnotationConfiguration} table properties coming from Manifest Settings
   */


  _exports.getTableAnnotationConfiguration = getTableAnnotationConfiguration;

  function getTableManifestConfiguration(tableContext) {
    var tableManifestSettings = _getTableManifestSettings(tableContext);

    if (tableManifestSettings) {
      var _tableManifestSetting, _tableManifestSetting2, _tableManifestSetting3;

      var quickSelectionVariant = JSON.stringify(tableManifestSettings.quickVariantSelection);
      return {
        quickFilter: quickSelectionVariant,
        type: tableManifestSettings.type,
        headerVisible: quickSelectionVariant && tableManifestSettings.quickVariantSelection.hideTableTitle === true ? false : true,
        enableExport: tableManifestSettings.enableExport,
        creationMode: (_tableManifestSetting = tableManifestSettings.creationMode) === null || _tableManifestSetting === void 0 ? void 0 : _tableManifestSetting.name,
        createAtEnd: (_tableManifestSetting2 = tableManifestSettings.creationMode) === null || _tableManifestSetting2 === void 0 ? void 0 : _tableManifestSetting2.createAtEnd,
        disableAddRowButtonForEmptyData: (_tableManifestSetting3 = tableManifestSettings.creationMode) === null || _tableManifestSetting3 === void 0 ? void 0 : _tableManifestSetting3.disableAddRowButtonForEmptyData
      };
    } else {
      return undefined;
    }
  }

  _exports.getTableManifestConfiguration = getTableManifestConfiguration;

  function getTableActionsConfiguration(visualizationPath, entityType, manifestSettings) {
    var _manifestSettings$con5;

    var manifestActions = manifestSettings.controlConfiguration ? (_manifestSettings$con5 = manifestSettings.controlConfiguration[visualizationPath]) === null || _manifestSettings$con5 === void 0 ? void 0 : _manifestSettings$con5.actions : undefined;
    return _getTableActionsFromManifest(manifestActions);
  }

  _exports.getTableActionsConfiguration = getTableActionsConfiguration;
  return _exports;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,