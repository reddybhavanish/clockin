<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns="sap.m"
	xmlns:f="sap.ui.layout.form"
	xmlns:mdc="sap.ui.mdc"
	xmlns:macro="sap.fe.macros"
	xmlns:core="sap.ui.core"
	xmlns:dt="sap.ui.dt"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	template:require="{
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper',
		COMMON: 'sap/fe/macros/CommonHelper',
		FORM: 'sap/fe/macros/form/FormHelper'
	}"
>
	<f:FormContainer
		unittest:id="formC"
		dt:designtime="sap/fe/macros/FormContainer.designtime"
		id="{= ${this>id} || undefined}"
		title="{this>title}"
		binding="{= FORM.generateBindingExpression(${this>navigationPath},${entitySet>./@com.sap.vocabularies.Common.v1.SemanticKey})}"
		visible="{= ${this>visibilityPath} ? ('{= !${' + ${this>visibilityPath} + '} }') : true }"
	>
		<f:dependents>
			<!-- Create the value help dialogs for fields inside form container -->
			<template:repeat list="{path:'dataFieldCollection>'}" var="dataField">
				<!-- <template:if test="{= ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction' &amp;&amp; !${formElements>Target}}"> -->
				<template:with path="dataField>Value" var="item">
					<template:if test="{this>id}">
						<macro:ValueHelp idPrefix="{= ID.generate([${this>id}, 'FieldValueHelp']) }" entitySet="{entitySet>}" property="{item>}" />
					</template:if>
				</template:with>
				<!-- </template:if> -->
			</template:repeat>
		</f:dependents>
		<f:formElements>
			<template:with path="dataFieldCollection>" var="formElements">
				<template:if test="{= ${formElements>./@sapui.name}.indexOf('com.sap.vocabularies.UI.v1.DataPoint') > -1 }">
					<template:then>
						<f:FormElement
							id="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${formElements>}]) : ''}"
							label="{formElements>Title@@MODEL.value}"
						>
							<f:fields>
								<macro:Field
									idPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${formElements>}]) : '' }"
									vhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FieldValueHelp']) : ''}"
									entitySet="{entitySet>}"
									dataField="{formElements>}"
									editMode="{= ${this>editMode} || 'Display'}"
									createMode="{this>createMode}"
									parentControl="Form"
									onChange="{= ${this>onChange} }"
								/>
							</f:fields>
						</f:FormElement>
					</template:then>
					<template:else>
						<template:repeat list="{formElements>}" var="dataField">
							<template:if
								test="{= ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction'&amp;&amp; ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation' }"
							>
								<template:then>
									<template:if test="{= !(${dataField>./@com.sap.vocabularies.UI.v1.Hidden} === true)}">
										<f:FormElement
											id="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${dataField>}]) : '' }"
											label="{dataField>@@MODEL.label}"
											visible="{dataField>@@COMMON.getHiddenPathExpression}"
										>
											<f:fields>
												<macro:Field
													editMode="{= ${this>editMode} ? ${this>editMode} : 'Display'}"
													createMode="{this>createMode}"
													idPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${dataField>}]) : '' }"
													vhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FieldValueHelp']) : '' }"
													entitySet="{entitySet>}"
													dataField="{dataField>}"
													onCallAction="{= ${this>onCallAction} ? ${this>onCallAction} : null}"
													parentControl="Form"
													onChange="{= ${this>onChange} }"
												/>
											</f:fields>
										</f:FormElement>
									</template:if>
								</template:then>
							</template:if>
						</template:repeat>
					</template:else>
				</template:if>
			</template:with>
		</f:formElements>
	</f:FormContainer>
</core:FragmentDefinition>
