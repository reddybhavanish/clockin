<core:FragmentDefinition
	xmlns="sap.suite.ui.microchart"
	xmlns:core="sap.ui.core"
	xmlns:oDataV4MicroChart="sap.fe.macros.microchart"
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	template:require="{
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
		MICROCHART: 'sap/fe/macros/microchart/MicroChartHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper'
	}"
>
	<!-- MODEL.value is used instead MODEL.format because, MODEL.format adds type as Unit when Currency/Unit annotations exist and the control property expects decimal as type -->
	<template:with path="chartAnnotation>Measures/0" helper="MICROCHART.getMeasureAttributeForMeasure" var="MeasureAttribute">
		<template:with path="MeasureAttribute>DataPoint/$AnnotationPath/" var="DataPoint">
			<template:if
				test="{= ${DataPoint>Value} &amp;&amp; ${chartAnnotation>Dimensions/0/} &amp;&amp; MICROCHART.isNotAlwaysHidden('Comparison', ${DataPoint>Value}, undefined, ${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"
			>
				<template:then>
					<template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure">
						<template:with path="chartAnnotation>Dimensions/0/" var="Dimension">
							<template:with path="chartAnnotation>Dimensions/0/$PropertyPath" helper="MODEL.resolve$Path" var="DimensionPath">
								<oDataV4MicroChart:MicroChartContainer
									id="{= ${this>id} ? ID.generate([${this>id}, 'ComparisonMicroChart']) : undefined }"
									renderLabels="{= ${this>renderLabels} !== 'false' ? true : false }"
									chartTitle="{= ${this>title} || ${chartAnnotation>Title}}"
									chartDescription="{= ${this>description} || ${chartAnnotation>Description}}"
									uomPath="{= ${this>renderLabels} !== 'false' &amp;&amp; MICROCHART.getCurrencyOrUnit(${Measure>@}) }"
									dataPointQualifiers="{= ${DataPoint>./@sapui.name}.indexOf('com.sap.vocabularies.UI.v1.DataPoint') === -1 ? undefined : (${DataPoint>./@sapui.name}.indexOf('#') > -1 ? ${DataPoint>./@sapui.name}.split('#')[1] : '') }"
									binding="{= ${this>groupId} ? ('{path:\'\', parameters : { $$groupId: \'' + ${this>groupId} + '\'} }') : undefined }"
								>
									<ComparisonMicroChart
										data="{= '{path:\'' + (${collection>$kind} === 'EntitySet' ? '/' : '') + ${collection>@sapui.name} + '\', parameters : {' + MICROCHART.getSelectParameters('', '', (${DataPoint>Criticality} ? ${DataPoint>Criticality/$Path} : ''), MICROCHART.getCurrencyOrUnit(${Measure>@}), (${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text/$Path} : ${Dimension>$PropertyPath})) + '} }' }"
										colorPalette="{= ${DataPoint>Criticality} ? undefined : 'sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,
									sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,
									sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11' }"
									>
										<data>
											<ComparisonMicroChartData
												value="{DataPoint>Value@@MODEL.value}"
												title="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${DimensionPath>@com.sap.vocabularies.Common.v1.Text@@MODEL.format} : ${Dimension>@@MODEL.format} }"
												displayValue="{= ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text} ? MICROCHART.formatDecimal(${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text/$Path}, ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) : MICROCHART.formatDecimal(${DataPoint>Value/$Path}, ${DataPoint>Value/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"
												color="{= MICROCHART.getCriticalityBinding(${DataPoint>}) }"
											>
										</ComparisonMicroChartData>
										</data>
									</ComparisonMicroChart>
								</oDataV4MicroChart:MicroChartContainer>
							</template:with>
						</template:with>
					</template:with>
				</template:then>
				<template:elseif
					test="{= MICROCHART.logWarning('Comparison', { DataPoint_Value : ${DataPoint>Value}, Dimension : ${chartAnnotation>Dimensions/0/$PropertyPath} }) }"
				>
				</template:elseif>
			</template:if>
		</template:with>
	</template:with>
</core:FragmentDefinition>
