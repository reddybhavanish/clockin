<core:FragmentDefinition
	xmlns="sap.suite.ui.microchart"
	xmlns:core="sap.ui.core"
	xmlns:oDataV4MicroChart="sap.fe.macros.microchart"
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	template:require="{
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
		MICROCHART: 'sap/fe/macros/microchart/MicroChartHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper'
	}"
>
	<!-- MODEL.value is used instead MODEL.format because, MODEL.format adds type as Unit when Currency/Unit annotations exist and the control property expects decimal as type -->
	<template:with path="chartAnnotation>Measures/0" helper="MICROCHART.getMeasureAttributeForMeasure" var="MeasureAttribute">
		<template:with path="MeasureAttribute>DataPoint/$AnnotationPath/" var="DataPoint">
			<template:if
				test="{= ${DataPoint>Value} &amp;&amp; ${DataPoint>MaximumValue} &amp;&amp; MICROCHART.isNotAlwaysHidden('Bullet', ${DataPoint>Value}, ${DataPoint>MaximumValue}, ${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}, ${DataPoint>MaximumValue/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"
			>
				<template:then>
					<template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure">
						<oDataV4MicroChart:MicroChartContainer
							id="{= ${this>id} ? ID.generate([${this>id}, 'HarveyBallMicroChart']) : undefined }"
							renderLabels="{= ${this>renderLabels} !== 'false' ? true : false }"
							chartTitle="{= ${this>title} || ${chartAnnotation>Title}}"
							chartDescription="{= ${this>description} || ${chartAnnotation>Description}}"
							uomPath="{= ${this>renderLabels} !== 'false' &amp;&amp; (${Measure>@Org.OData.Measures.V1.ISOCurrency} || ${Measure>@Org.OData.Measures.V1.Unit}) &amp;&amp; (${Measure>@Org.OData.Measures.V1.ISOCurrency/$Path} || ${Measure>@Org.OData.Measures.V1.Unit/$Path}) }"
							binding="{= ('{path:\'' + ((${collection>$isCollection} || ${collection>$kind} === 'EntitySet') ? '' : ${collection>@sapui.name}) + '\' , parameters : {' + MICROCHART.getSelectParameters(${this>groupId}, '',(${DataPoint>Criticality} ? ${DataPoint>Criticality/$Path} : ''), ((${Measure>@Org.OData.Measures.V1.ISOCurrency} || ${Measure>@Org.OData.Measures.V1.Unit}) ? (${Measure>@Org.OData.Measures.V1.ISOCurrency/$Path} || ${Measure>@Org.OData.Measures.V1.Unit/$Path}) : '')) + '} }') }"
							visible="{= MICROCHART.getHiddenPathExpression(${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}, ${DataPoint>MaximumValue/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"
						>
							<HarveyBallMicroChart
								formattedLabel="true"
								totalLabel="{= MICROCHART.formatDecimal(${DataPoint>MaximumValue/$Path}, ${DataPoint>MaximumValue/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"
								total="{DataPoint>MaximumValue@@MODEL.value}"
								colorPalette="{= ${DataPoint>Criticality} ? undefined : 'sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,
									sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,
									sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11' }"
							>
								<items>
									<HarveyBallMicroChartItem
										formattedLabel="true"
										fractionLabel="{= MICROCHART.formatDecimal(${DataPoint>Value/$Path}, ${DataPoint>Value/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"
										fraction="{DataPoint>Value@@MODEL.value}"
										color="{= MICROCHART.getCriticalityBinding(${DataPoint>}) }"
									/>
								</items>
							</HarveyBallMicroChart>
						</oDataV4MicroChart:MicroChartContainer>
					</template:with>
				</template:then>
				<template:elseif
					test="{= MICROCHART.logWarning('HarveyBall', { DataPoint_Value : ${DataPoint>Value}, DataPoint_MaximumValue : ${DataPoint>MaximumValue} }) }"
				>
				</template:elseif>
			</template:if>
		</template:with>
	</template:with>
</core:FragmentDefinition>
